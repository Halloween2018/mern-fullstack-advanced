{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","url","dbName","db","MongoClient","connect","then","connection","listen","console","log","catch","error","client","close","use","express","static","bodyParser","json","issues","id","status","owner","created","Date","effort","completionDate","undefined","title","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","bundle","noInfo","publicPath","output","get","req","res","collection","find","toArray","metadata","total_count","length","_metadata","records","message","post","newIssue","body","err","Issue","validateIssue","insertOne","_id","result","insertedId","limit","next"],"mappings":"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","file":"server.js","sourcesContent":["import '@babel/polyfill';\r\n// const express = require('express');\r\nimport express from 'express';\r\n\r\n// const bodyParser = require('body-parser');\t/* 引入中间件，解析请求体中的数据【解析请求正文并将其转换为对象】 */\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\nimport Issue from './issue.js';\r\nimport SourceMapSupport from 'source-map-support';\r\nSourceMapSupport.install();\r\n\r\nconst app = express();\r\n/* 引入驱动程序  从服务器读取数据 */\r\n// const MongoClient = require('mongodb').MongoClient;\r\nconst url = 'mongodb://localhost:27017';\r\nconst dbName = 'issuetracker';\r\n//引入验证模块\r\n// const Issue = require('./issue');\r\n\r\n// const client = new MongoClient(url);\r\n\r\nlet db;\t\t//保存数据库的连接\r\n/* MongoClient.connect(url + dbName).then(connection => {\r\n\tdb = connection;\r\n\r\n\tapp.listen(3000, function() {\r\n\t\tconsole.log('App started on port 3000');\r\n\t});\r\n\t\r\n}).catch(error =>{\r\n\tconsole.log('ERROR:', error);\r\n}) */\r\n\r\n// throw new Error('Test');\r\nMongoClient.connect(url).then(connection => {\r\n\tdb = connection.db(dbName);\r\n\r\n\t/* console.log(connection);\r\n\tconsole.log(\"check it out:\");\r\n\tconsole.log(db); */\r\n\r\n\tapp.listen(3000, function() {\r\n\t\tconsole.log('App started on port 3000');\r\n\t});\r\n\r\n}).catch(error => {\r\n\tconsole.log('ERROR:', error);\r\n\tclient.close();\r\n});\r\n\r\n\r\napp.use(express.static('static'));\r\n/* 使用中间件 */\r\napp.use(bodyParser.json());\r\nconst issues = [\r\n\t{\r\n\t\tid: 1, status: 'Open', owner: 'Ravan',\r\n\t\tcreated: new Date('2019-03-30'), effort: 5, completionDate: undefined,\r\n\t\ttitle: 'Error in console when clicking Add',\r\n\t},\r\n\t{\r\n\t\tid: 2, status: 'Assigned', owner: 'Eddie',\r\n\t\tcreated: new Date('2019-04-20'), effort: 14, \r\n\t\tcompletionDate: new Date('2019-05-04'),\r\n\t\ttitle: 'Missing bottom border on panel',\r\n\t}\r\n];\r\n\r\nif(process.env.NODE_ENV !== 'production') {\r\n\tconst webpack = require('webpack');\r\n\tconst webpackDevMiddleware = require('webpack-dev-middleware');\r\n\tconst webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n\tconst config = require('../webpack.config');\r\n\t// config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\r\n\t// config.plugins.push(new webpack.HotModuleReplacementPlugin());\r\n\r\n\tconst bundle = webpack(config);\r\n\tapp.use(webpackDevMiddleware(bundle, {noInfo: true, publicPath: config.output.publicPath}));\r\n\tapp.use(webpackHotMiddleware(bundle));\r\n}\r\n\r\napp.get('/api/issues', (req, res) => {\r\n\r\n\r\n\tdb.collection('issues').find().toArray().then(issues => {\r\n\t\tconst metadata = { total_count: issues.length };\r\n\t\tres.json({ _metadata: metadata, records: issues });\r\n\t}).catch(error => {\r\n\t\tconsole.log(error);\r\n\t\tres.status(500).json({message: `Internal Server Error: ${error}` });\r\n\t});\r\n\r\n\t\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n\tconst newIssue = req.body;\r\n\t// console.log(newIssue);\r\n\t// newIssue.id = issues.length + 1;\t\t//数据库已自动生成，不需要自己设置\r\n\tnewIssue.created = new Date();\r\n\tif( !newIssue.status ) \r\n\t\tnewIssue.status = 'New';\r\n\t\r\n\tconst err =  Issue.validateIssue(newIssue);\r\n\tif (err) {\r\n\t\tres.status(402).json({ message:`Invalid request:${err}`});\r\n\t\treturn;\r\n\t}\r\n\r\n\tdb.collection('issues').insertOne(newIssue).then(result => \r\n\t\tdb.collection('issues').find({ _id: result.insertedId }).limit(1).next()\r\n\t).then(newIssue => {\r\n\t\tres.json(newIssue);\t\t//只返回新插入的数据\r\n\t}).catch(error => {\r\n\t\tconsole.log(error);\r\n\t\tres.status(500).json({ message: `Internal Server Error: ${error}` });\r\n\t})\r\n\r\n\t/* issues.push(newIssue);\r\n\tres.json(newIssue); */\r\n});\r\n\r\n/* app.listen(3000, function() {\r\n\tconsole.log('App started on port 3000');\r\n}); */\r\n\r\n\r\n"]}